rules_version = '2';
service cloud.firestore {
  match /databases/{db}/documents {

    function isActiveMember(orgId) {
      return request.auth != null
             && exists(/databases/$(db)/documents/organization_members/$(orgId + ':' + request.auth.uid))
             && get(/databases/$(db)/documents/organization_members/$(orgId + ':' + request.auth.uid)).data.status == 'active';
    }
    
    function hasRole(orgId, allowedRoles) {
      return isActiveMember(orgId)
             && get(/databases/$(db)/documents/organization_members/$(orgId + ':' + request.auth.uid)).data.role in allowedRoles;
    }

    // Orgs (metadatos)
    match /organizations/{orgId} {
      allow read: if isActiveMember(orgId);
      allow create, update, delete: if hasRole(orgId, ['owner','admin']);
    }

    // Subcolecciones bajo org (evaluations, reports, etc.)
    match /organizations/{orgId}/{collection}/{docId} {
      allow read: if isActiveMember(orgId);
      allow create: if hasRole(orgId, ['owner','admin','member']);
      allow update, delete: if hasRole(orgId, ['owner','admin']);
    }

    // Colecci√≥n plana de memberships (solo admins/owners)
    match /organization_members/{membershipId} {
      // membershipId esperado: "<orgId>:<uid>"
      allow read: if request.auth != null
                  && resource.data.user_id == request.auth.uid;
      allow create, update, delete: if request.auth != null
                  && request.resource.data.role in ['owner','admin'];
    }

    // Denegar todo lo no contemplado
    match /{document=**} { allow read, write: if false; }
  }
}